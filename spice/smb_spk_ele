#!/usr/local/bin/expect --
#
# Automate the Horizons session required to produce a small-body SPK file.
# given user-input heliocentric J2000 ecliptic osculating elements
#
# Version 1.0                                              (Expect v.5.18)
#
# Modification History:
#
#  DATE         Who  Change
#  -----------  ---  ----------------------------------------------------------
#  2004-Aug-05  JDG  Version 1.0. Based on V1.3 of 'smb_spk' script.
#
# Key:
#  JDG= Jon.D.Giorgini@jpl.nasa.gov
#
# COMMAND LINE:
# -------------
#
#   smb_spk_ele [-t|-b] [object_name] [start] [stop] [elements] [email address] {file name}
#
# EXPLANATION:
# ------------
#
#    [-b|-t] 
#             A single flag, either "-b" or "-t"
#
#            -b  create file in binary format. RECOMMENDED.
#
#            -t  create file in temporary text TRANSFER format. 
#                 The file must later be converted to a binary SPK form 
#                 using utilities "tobin" or "spacit"
#
#   [object_name] 
# 
#            Name of object. Not used other than to store in file comments.
#
#   [start]
# 
#            Date the SPK file is to begin.
#              Examples:  2003-Feb-1 
#                         "2003-Feb-1 16:00"
#
#   [stop]
# 
#            Date the SPK file is to end. Must be more than 32 days later 
#            than [start]. 
#              Examples:  2006-Jan-12
#                         "2006-Jan-12 12:00"
#
#   [elements]
#
#            A single, quoted string containing the object J2000 heliocentric
#            osculating elements.
#
#              Example: 
# "EPOCH='2449526.5' EC=.6570220840219289 QR=.5559654280797371 TP='2449448.890787227' OM=78.10766874391773 W=77.40198125423228 IN=24.4225258251465"
#
#   [email address]
#
#            User's Internet e-mail contact address.
#              Example: joe@your.domain.name
#
#   {file name}
#
#            Optional name to give the file on your system. If not
#            specified, it uses the SPICE ID to assign a local file 
#            name in the current directory. Default form:
#               
#                 #######.bsp  (binary SPK          ... -b argument)
#                 #######.xsp  (transfer format SPK ... -t argument)
# 
#            ... where "#######" is the SPICE ID integer. For example,
#            "1000003.bsp" for 47P/Ashbrook-Jackson.
#
# EXAMPLE:
# --------
#
#   smb_spk_ele -b "1990 MU" 2000-Jan-1 2005-JAN-1 "EPOCH='2449526.5' EC=.6570220840219289 QR=.5559654280797371 TP='2449448.890787227' OM=78.10766874391773 W=77.40198125423228 IN=24.4225258251465    " joe@your.domain.name 1990mu.bsp
#
#    The above generates a binary format file called "1990mu.bsp" for  the
# object over the specified time span. 
#
#    Quotation marks are strictly necessary only for the small-body command 
# argument, which will always contain a semi-colon. This Horizons semi-colon
# notation conflicts with the UNIX shell command-line meaning, so must be
# enclosed in quotes to be passed literally into the script.
#
#    The other arguments only need quotes if they contain spaces. In such a
# case, the quotes again insure the whole argument is passed literally to the
# script without being improperly parsed into components.
#
#    For example, the date 2000-Jan-1 does NOT need quotes on the command
# line, but "2000-Jan-1 10:00" does, since the argument contains a space
# delimiter. Instead of remembering this, one could also just enclose all
# command-line arguments in quotes.
#
#    To summarize the SPK file, one could then type the commands ...
#
#  commnt -r 1990mu.bsp   (Display internal Horizons file summary)
#  brief 1990mu.bsp       (Display file time-span)
#
# BACKGROUND:
# -----------
#
#   This script ("smb_spk_ele") allows a user to type a single command on a 
# workstation to cause the creation of a binary OR text transfer format SPK 
# file for a comet or asteroid on that same machine. Planet and satellite
# SPK files cannot be generated this way, but are available separately. 
#
#   The script offers network transparency by connecting to the JPL Horizons
# ephemeris system, automating the interaction with it, then transferring the 
# file by FTP back to the user's local machine.
#
# REQUIREMENTS
# ------------
#
#   smb_spk_ele is written in the Expect automation language. The Expect
# interpretation program must be present on any computer system before 
# 'smb_spk_ele' can run.
#
#   The Expect language is available for download at the URL:
#
#                      http://expect.nist.gov/
#
#   Expect is an extension of the TCL/TK languages, which are also required.
# The web site provides appropriate links. Installation procedures are
# provided and all packages can typically be installed and their self-check
# tests completed in about 45 minutes by following the directions.
#
#   Expect is primarily supported on UNIX platforms, but versions for other 
# systems do exist. A useful book on the language is "Exploring Expect" by
# Don Libes (ISBN 1-56592-090-2)
# 
#   Once the Expect language is installed on your machine, you may need to
# alter the very first line of this script ("#!/usr/local/bin/expect") to
# point to the installation location on that machine.  The script will then
# be able to execute.
#
#   The user's machine must be able to resolve Internet domain names and
# support FTP.
#
# USAGE
# -----
# 
#   The script will handle most errors and respond with an indicator message.
#
#   Things to keep in mind:
#
#  1) It may take a minute or two to generate and transfer the SPK, depending
# on how lengthy the numerical integration is, network state and server load.
#
#  2) For user input objects,a SPK ID is RANDOMLY assigned in the 9000000 
# range. This is an unofficial number, NOT guaranteed unique and NOT permanent; 
# the next time the same elements are submitted, the file will be built using
# a different SPK ID number. Utilities exist that allow this ID to be changed
# after the fact, within a file. Contact JPL for more information.
#
#  3) The script returns a standard exit status code (0=OK, 1=FAILED) which 
# can be checked by other calling programs. 
#
#  4) The Horizons SPK file returned contains the target object with respect 
# to the Sun only. This SPK file is intended to be combined with other SPK 
# files (i.e. loaded into a kernel pool) containing the Earth, Moon, and 
# other planets so as to derive the ultimately required data. 
#
#-----------------------------------------------------------------------------
#
# Establish defaults, turn debugging on or off
# --------------------------------------------
  set spk_ID_override ""
  exp_internal 0
  set timeout  60
  remove_nulls 0
#
# Set Horizons constants
# ----------------------
  set horizons_machine ssd.jpl.nasa.gov
  set horizons_ftp_dir pub/ssd/
#
# Turn off output (set quiet 0; set quiet 1 to observe process)
# -------------------------------------------------------------
  set quiet 0
  log_user $quiet
#
# Command line values; check for input problems
# ---------------------------------------------
  set argc [llength $argv]
  set flag [string tolower [lindex $argv 0]]
#
# Retrieve possible SPK ID override value
# ---------------------------------------
  scan $flag "%2s%s" file_flag spk_ID_override
  set spkidlen [string length $spk_ID_override]
  if { $spkidlen != 0 } {
   if { [string match "\[1-9]\[0-9]*" $spk_ID_override] == 0 } {
     puts "\SPK ID must be positive integer."
     puts " "
     exit 1
}  elseif { $spk_ID_override < 1000000 || $spk_ID_override > 9999999 } {
     puts "\SPK ID must be between 1000000 and 10000000!"
     exit 1
}  else {
     set spk_ID_override ",$spk_ID_override"
    }
}
  if {$argc < 5} {
    puts "\nMissing arguments. Usage:"
    puts { smb_spk_ele [-b|-t] [small-body] [start] [stop] [elements] [e-mail] {file name}}
    puts " "
    exit 1 
} elseif {$argc > 7} {
    puts "\nToo many arguments. May need to use quotes.  Usage:"
    puts { smb_spk_ele [-b|-t] [small-body] [start] [stop] [e-mail] {file name}}
    puts "Example --"
    puts { smb_spk_ele -b "1999 JM8" "1999-JAN-2 10:00" "2015-JAN-1" "EPOCH=... EC=..." "joe@your.domain.name" 1999jm8.bsp}
    puts " "
    exit 1 
} elseif { [string first "@" [lindex $argv 5] ] < 1 } {
    puts "\nNot Internet e-mail syntax: [lindex $argv 5] " 
    puts " "
    exit 1
} elseif { $file_flag == "-t" || $file_flag == "-T" } {
    set file_type YES 
    set ftp_type ascii
    set ftp_sufx .xsp
} elseif { $file_flag == "-b" || $file_flag == "-B" } {
    set file_type NO
    set ftp_type binary
    set ftp_sufx .bsp
} else { 
    puts "Unknown file type: [lindex $argv 0]"
    puts { smb_spk_ele [-t|-b] [small-body] [start] [stop] [elements] [e-mail] {file name}}
    puts " "
    exit 1
  }
#
  set local_file [lindex $argv 6]
#
# Connect to Horizons 
# -------------------
  spawn telnet $horizons_machine 6775
#
# Get main prompt and proceed 
# ---------------------------
  expect { 
    timeout        {puts "No response from $horizons_machine"; exit 1} 
    "unknown host" {puts "This system cannot find $horizons_machine"; exit 1}
    "Horizons> "   {send PAGE\r} }
  set timeout 15
  expect { 
    timeout        {puts "Horizons timed out (LEVEL=1). Try later or notify JPL."; send x\r; exit 1} 
    "Horizons> "   {send ";\r"} }
#
# Wait for element input prompt. Send elements.
# ---------------------------------------------
  expect { 
    timeout        {puts "Horizons timed out (LEVEL=2). Try later or notify JPL."; send x\r; exit 1} 
    -re ".*: $"    {send [lindex $argv 4]\r\r }
   }
#
# Specify frame, first processing any errors from element input
# -------------------------------------------------------------
  expect {
    timeout        {puts "Horizons timed out (LEVEL=3). Try later or notify JPL."; send x\r; exit 1} 
    -re "INPUT ERROR.*\r" {
      puts "Horizons encountered an input error and halted --"
      puts " "
      puts $expect_out(0,string)
      send q\r
      exit 1}
    -re "Error.*\r" {
      puts "Horizons encountered an input error and halted -- "
      puts " "
      puts $expect_out(0,string)
      send q\r
      exit 1}
    -re ".*Ecliptic frame of input.*: $" { send J2000\r }
   }
#
# Wait for input prompt, send elements
# ------------------------------------
  expect { 
    timeout        {puts "Horizons timed out (LEVEL=4). Try later or notify JPL."; send x\r; exit 1} 
    -re ".*Optional name of object.*: $" {send [lindex $argv 1]\r }
   }
#
# Request SPK
# -----------
  expect { 
    timeout        {puts "Horizons timed out (LEVEL=5). Try later or notify JPL."; send x\r; exit 1} 
   -re ".*Select.*<cr>: $" { send S\r   }
   }
#
# Pick out SPICE ID
# -----------------
  if { $argc < 7 } {
    expect { 
     timeout        {puts "Horizons timed out (LEVEL=6). Try later or notify JPL."; send x\r; exit 1} 
     -re " Assigned SPK object ID: (.*)\r\r\n \r\r\n Enter your" {
         scan $expect_out(1,string) "%i" spkid
         set local_file $spkid$ftp_sufx }
      } 
  }
#
# Process prompt for email address
# --------------------------------
  expect {
    timeout        {puts "Horizons timed out (LEVEL=7). Try later or notify JPL."; send x\r; exit 1} 
    -re ".*address.*: $" {
        send [lindex $argv 5]\r }
     }
#
# Process email confirmation
# --------------------------
  expect { 
    timeout        {puts "Horizons timed out (LEVEL=8). Try later or notify JPL."; send x\r; exit 1} 
    -re ".*yes.*: $"  {
       send yes\r }
     }
#
# Process file type
# -----------------
  expect {
    timeout        {puts "Horizons timed out (LEVEL=9). Try later or notify JPL."; send x\r; exit 1} 
    -re ".*YES.*: $"  {
       send $file_type\r }
     } 
#
# Set start date 
# --------------
  expect {
    timeout        {puts "Horizons timed out (LEVEL=10). Try later or notify JPL."; send x\r; exit 1} 
    -re ".*START.*: $"  {
       send [lindex $argv 2]\r }
     } 
#
# Handle start date error or STOP date
# ------------------------------------
  expect {
    timeout        {puts "Horizons timed out (LEVEL=11). Try later or notify JPL."; send x\r; exit 1} 
    -re ".*try.*: $" {
       send x\r
       puts "\nError in START date: [lindex $argv 2]"
       puts "Must be in 1900 to 2100 time span. Example: '2018-JAN-1'"
       puts " "
       exit 1 }
    -re ".*STOP.*: $" {
       send [lindex $argv 3]\r }
     }
#
# Handle stop date error
# ----------------------
  set timeout -1
  expect {
    -re ".*large.*" {
       send x\r
       puts "\nError in STOP date: [lindex $argv 3]"
       puts "Stop date must not be more than 200 years after start."
       puts " "
       exit 1 }
    -re ".*try.*" {
       send x\r
       puts "\nError in STOP date: [lindex $argv 3]"
       puts "Must be in 1900 to 2100 time span. Example: '2017-JAN-1'"
       puts " "
       exit 1 }
    -re ".*time-span too small.*" {
       send x\r
       puts "\nError in requested length: [lindex $argv 2] to [lindex $argv 3]"
       puts "Time span of file must be >= 32 days."
       puts " "
       exit 1 }
    -re ".*YES.*" {
       send NO\r }
   }
#
# Pick out ftp file name
# ----------------------
  expect { 
   -re "File name   : (.*)\r\r\n   File type" {
       set ftp_name $expect_out(1,string) }
       send "x\r"
    } 
#
# Retrieve file by anonymous FTP
# ------------------------------
  set timeout 30
  spawn ftp $horizons_machine
  expect {
     timeout {puts "Cancelled -- FTP server not responding."; exit 1 }
     -re "Name.*: $"
   } 
  send "anonymous\r"
  expect "Password:"
#
# Next bit is HP-UNIX work-around
# -------------------------------
  set oldpw [lindex $argv 5]
  if [regsub @ $oldpw '\134@' pw] {
    set newpw $pw
  } else {
    set newpw $oldpw
  }
  send $newpw\r
#
  expect {
    "Login failed." { 
       send "quit\r" 
       puts "\nFTP login failed -- must use full Internet e-mail address."
       puts "Example:  'joe@your.domain.name'"
       puts " "
       exit 1 }
    "ftp> " { send $ftp_type\r    } 
   }
  expect "ftp> " { send "cd pub/ssd\r" }
#
  set timeout -1
  expect "ftp> " { send "get $ftp_name $local_file\r" }
  expect {
     -re ".*No such.*" {
       puts "\nError -- cannot find $ftp_name on server."
       puts " "
       exit 1 }
     -re ".*425 Can't build data connection.*" {
       expect "ftp> " { send passive\r }
       expect "ftp> " { send "get $ftp_name $local_file\r" }
       exit 0 }
     "ftp> " { send "quit\r" }
   }
#
# Finished, set status code 
# -------------------------
  exit 0
